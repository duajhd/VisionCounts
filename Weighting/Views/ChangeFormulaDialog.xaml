<UserControl
    x:Class="Weighting.Views.ChangeFormulaDialog"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:Weighting.Views"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:tool="clr-namespace:Weighting.Shared"
    xmlns:va="clr-namespace:Weighting.Shared"
    Width="Auto"
    Height="Auto"
    MinWidth="200"
    MaxWidth="800"
    MaxHeight="600"
    mc:Ignorable="d">
    <UserControl.Resources>
        <!--  注册自定义 ValidationRule  -->
        <va:NotEmptyValidationRule x:Key="NotEmptyRule" />
        <tool:BindingProxy x:Key="proxy" Data="{Binding}" />
        <va:ScaleNameToNumberConverter x:Key="ScaleNameToNumberConverter" />

    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="60" />
            <RowDefinition Height="*" />
            <RowDefinition Height="40" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition Width="60" />
            </Grid.ColumnDefinitions>
            <UniformGrid Grid.Column="0" Columns="2">
                <TextBlock
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    FontSize="14">
                    配方名称：
                </TextBlock>
                <TextBox Text="{Binding FormulaName}" />
            </UniformGrid>
            <UniformGrid Grid.Column="1" Columns="2">
                <TextBlock
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    FontSize="14">
                    配方编码：
                </TextBlock>
                <TextBox Text="{Binding Name}" />
            </UniformGrid>
            <Button
                Grid.Column="2"
                Command="{Binding AddRowCommand}"
                Cursor="Hand"
                Style="{StaticResource MaterialDesignFloatingActionMiniButton}"
                ToolTip="新增一行">
                <materialDesign:PackIcon Kind="Plus" />
            </Button>
        </Grid>
        <DataGrid
            x:Name="DataGrid"
            Grid.Row="1"
            AutoGenerateColumns="False"
            CanUserAddRows="False"
            HeadersVisibility="All"
            ItemsSource="{Binding EdtingScalingData}">
            <DataGrid.Columns>
                <!--  by default a DataGridCheckBoxColumn will have the MaterialDesignDataGridCheckBoxColumnStyle and MaterialDesignDataGridCheckBoxColumnEditingStyle applied. See DataGridAssist.ApplyMaterialDesignColumnStyles attached property  -->
                <DataGridCheckBoxColumn Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}">
                    <DataGridCheckBoxColumn.Header>
                        <Border Background="Transparent">
                            <CheckBox IsChecked="{Binding Source={StaticResource proxy}, Path=Data.IsAllItems1Selected}" />
                        </Border>
                        <!--  IsChecked="{Binding RelativeSource={RelativeSource AncestorType=Page}, Path=DataContext.IsAllItems1Selected  -->
                    </DataGridCheckBoxColumn.Header>
                    <DataGridCheckBoxColumn.HeaderStyle>
                        <Style BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                        </Style>
                    </DataGridCheckBoxColumn.HeaderStyle>
                </DataGridCheckBoxColumn>
                <!--  by default a DataGridTextColumn will have the MaterialDesignDataGridTextColumnStyle and MaterialDesignDataGridTextColumnEditingStyle applied. See DataGridAssist.ApplyMaterialDesignColumnStyles attached property  -->

                <!--  if you want to use the pop up style (MaterialDesignDataGridTextColumnPopupEditingStyle), you must use MaterialDataGridTextColumn  -->

                <materialDesign:DataGridComboBoxColumn
                    Width="100"
                    Header="配料名"
                    IsEditable="True"
                    ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.MaterialNames}"
                    SelectedValueBinding="{Binding Item.MaterialName}">

                    <!--Setting the editing element style allows access to all of the combo box's properties
<materialDesign:MaterialDataGridComboBoxColumn.EditingElementStyle>
    <Style TargetType="ComboBox" BasedOn="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type ComboBox}, ResourceId=MaterialDataGridComboBoxColumnEditingStyle}}" >
        <Setter Property="IsEditable" Value="True" />
    </Style>
</materialDesign:MaterialDataGridComboBoxColumn.EditingElementStyle>
                    -->
                </materialDesign:DataGridComboBoxColumn>
                <!--  set a max length to get an indicator in the editor  -->
                <DataGridTextColumn Header="标准重量">
                    <DataGridTextColumn.Binding>
                        <Binding Path="Item.weights" StringFormat="{}{0:F3}">
                            <Binding.ValidationRules>
                                <StaticResource ResourceKey="NotEmptyRule" />
                            </Binding.ValidationRules>
                        </Binding>
                    </DataGridTextColumn.Binding>
                </DataGridTextColumn>
                <materialDesign:DataGridComboBoxColumn
                    Width="60"
                    Header="单位"
                    IsEditable="True"
                    ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.Units}"
                    SelectedValueBinding="{Binding Item.MaterialUnit}">

                    <!--Setting the editing element style allows access to all of the combo box's properties
<materialDesign:MaterialDataGridComboBoxColumn.EditingElementStyle>
    <Style TargetType="ComboBox" BasedOn="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type ComboBox}, ResourceId=MaterialDataGridComboBoxColumnEditingStyle}}" >
        <Setter Property="IsEditable" Value="True" />
    </Style>
</materialDesign:MaterialDataGridComboBoxColumn.EditingElementStyle>
                    -->
                </materialDesign:DataGridComboBoxColumn>
                <DataGridTextColumn Header="上公差">
                    <DataGridTextColumn.Binding>
                        <Binding Path="Item.UpperTolerance" StringFormat="{}{0:F3}">
                            <Binding.ValidationRules>
                                <StaticResource ResourceKey="NotEmptyRule" />
                            </Binding.ValidationRules>
                        </Binding>
                    </DataGridTextColumn.Binding>
                </DataGridTextColumn>
                <materialDesign:DataGridTextColumn
                    Width="100"
                    EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}"
                    Header="下公差">
                    <DataGridTextColumn.Binding>
                        <Binding Path="Item.LowerTolerance" StringFormat="{}{0:F3}">
                            <Binding.ValidationRules>
                                <StaticResource ResourceKey="NotEmptyRule" />
                            </Binding.ValidationRules>
                        </Binding>
                    </DataGridTextColumn.Binding>

                    <DataGridTextColumn.ElementStyle>
                        <Style BasedOn="{StaticResource MaterialDesignDataGridTextColumnStyle}" TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </materialDesign:DataGridTextColumn>
                <!--  use custom combo box column to get better combos. Use ItemsSourceBinding as your binding template to be applied to each combo  -->
                <materialDesign:DataGridComboBoxColumn
                    Width="60"
                    Header="单位"
                    IsEditable="True"
                    ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.Units}"
                    SelectedValueBinding="{Binding Item.ToleranceUnit, Mode=TwoWay}">

                    <!--Setting the editing element style allows access to all of the combo box's properties
<materialDesign:MaterialDataGridComboBoxColumn.EditingElementStyle>
    <Style TargetType="ComboBox" BasedOn="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type ComboBox}, ResourceId=MaterialDataGridComboBoxColumnEditingStyle}}" >
        <Setter Property="IsEditable" Value="True" />
    </Style>
</materialDesign:MaterialDataGridComboBoxColumn.EditingElementStyle>
                    -->
                </materialDesign:DataGridComboBoxColumn>
                <!--<materialDesign:DataGridComboBoxColumn
                                Width="100"
                                Header="秤台号"
                                IsEditable="True"
                                ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.ScalingNumsStr}"
                                SelectedValueBinding="{Binding Item.ScalingNum,Converter={StaticResource StringToIntegerConverter}}" />-->
                <materialDesign:DataGridComboBoxColumn
                    Width="100"
                    Header="秤台号"
                    IsEditable="True"
                    ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.ScalingNumsStr}"
                    SelectedItemBinding="{Binding Path=Item.ScalingID, Converter={StaticResource ScaleNameToNumberConverter}}" />
                <!--  按钮列  -->
                <DataGridTemplateColumn Width="*" Header="操作">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button
                                Command="{Binding DataContext.DeleteRowCommand, RelativeSource={RelativeSource AncestorType=UserControl}}"
                                CommandParameter="{Binding}"
                                Content="删除物料"
                                Style="{StaticResource MaterialDesignFlatButton}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

            </DataGrid.Columns>
        </DataGrid>
        <UniformGrid Grid.Row="2" Columns="2">
            <Button
                Width="70"
                HorizontalAlignment="Right"
                Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}"
                Content="取消"
                Style="{StaticResource MaterialDesignRaisedButton}"
                ToolTip="Resource name: MaterialDesignRaisedButton" />
            <Button
                Width="70"
                Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}"
                CommandParameter="True"
                Content="保存"
                Style="{StaticResource MaterialDesignRaisedButton}"
                ToolTip="Resource name: MaterialDesignRaisedButton" />
        </UniformGrid>
    </Grid>
</UserControl>
